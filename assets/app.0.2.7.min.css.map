{
  "version": 3,
  "file": "app.0.2.7.min.css",
  "sources": [
    "Panel.svelte",
    "ColumsSelect.svelte",
    "TargetEdit.svelte",
    "Tooltip.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { api, cols } from './../store/api.js';\n\timport { config } from './../store/config.js';\n\timport { targets } from './../store/targets.js';\n    import { FormGroup, CustomInput, Label, Row, Col } from 'sveltestrap';\n    let configEdited;\n    let configJSON;\n    const updateConfig = () => {\n        configEdited = JSON.parse(JSON.stringify($config));\n        configJSON = JSON.stringify({\n            sampling: $config.sampling,\n            battery: $config.battery,\n            ruuvitags: $config.ruuvitags,\n            targets: $targets,\n            columns: $config.columns,\n            customMeasures: $config.customMeasures,\n            log: $config.log,\n        }, null, 2);\n    };\n    updateConfig();\n    let col_left = 5;\n    let col_right = 6;\n    let state = `view`; // `view` | `saving`\n    let editSampling = false;\n    let editBattery = false;\n    let editLog = false;\n    let saving = ``;\n    let stateConfig = `hidden`; // `hidden` | `export` | `export`\n    const logsHelp = [\n        {\n            log: `timestamp`,\n            help: `Prefix logs with timestamp`,\n        },\n        {\n            log: `error`,\n            help: `Display error logs`,\n        },\n        {\n            log: `info`,\n            help: `Display info logs`,\n        },\n        {\n            log: `tags`,\n            help: `Display measures received by tags`,\n        },\n        {\n            log: `send`,\n            help: `Display measures sent to targets`,\n        },\n        {\n            log: `debug`,\n            help: `Display debug logs`,\n        },\n        {\n            log: `ws`,\n            help: `Display web socket logs`,\n        },\n    ];\n    function save(target) {\n        return async function() {\n            state = `saving`;\n            saving = target;\n            if (target === `config`) {\n                try {\n                    const configSaved = JSON.parse(configJSON);\n                    await api.post(`config`, configSaved);\n                    $config.sampling = configSaved.sampling;\n                    $config.battery = configSaved.battery;\n                    $config.ruuvitags = configSaved.ruuvitags;\n                    $config.columns = configSaved.columns;\n                    $config.customMeasures = configSaved.customMeasures;\n                    $config.log = configSaved.log;\n                    $targets = configSaved.targets;\n                    updateConfig();\n                    state = `view`;\n                } catch(error) {\n                    console.log(error);\n                }\n            } else {\n                stateConfig = `hidden`;\n                const data = {};\n                data[`${target}`] = configEdited[target];\n                try {\n                    await api.post(`config`, data);\n                    $config[target] = configEdited[target];\n                    updateConfig();\n                } catch(error) {\n                    console.log(error);\n                }\n                state = `view`;\n                editSampling = false;\n                editBattery = false;\n                editLog = false;\n            }\n        }\n    }\n</script>\n\n<style>\n    .select-log :global(.custom-control-label) {\n        padding-top: 2px;\n    }\n</style>\n\n<Row class=\"pt-2\">\n    <Col xs=\"4\">\n        <small class=\"px-2 py-1 bg-light\">\n            Sampling Configuration\n        </small>\n        <div class=\"pl-2\">\n            {#if editSampling}\n                <form id=\"form-sampling\" class=\"mt-4\" disabled>\n                    <div class=\"form-group row\">\n                        <label class=\"col-sm-{col_left} col-form-label-sm\">\n                            History\n                        </label>\n                        <div class=\"col-sm-{col_right}\">\n                            <input type=\"number\" name=\"history\"\n                             bind:value=\"{configEdited.sampling.history}\"\n                             class=\"form-control form-control-sm\"\n                             disabled={state === `saving` ? `disabled` : null}\n                            >\n                            <small class=\"form-text text-muted\">\n                                <em>Max samples in history</em>\n                            </small>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-sm-{col_left} col-form-label-sm\">\n                            Sampling interval\n                        </label>\n                        <div class=\"col-sm-{col_right}\">\n                            <input type=\"number\" name=\"interval\"\n                             bind:value=\"{configEdited.sampling.interval}\"\n                             class=\"form-control form-control-sm\"\n                             disabled={state === `saving` ? `disabled` : null}\n                            >\n                            <small class=\"form-text text-muted\">\n                                <em>Sampling interval (in ms)</em>\n                            </small>\n                        </div>\n                    </div>\n                </form>\n                {#if state === `saving` && saving === `sampling`}\n                    <div class=\"small\">\n                        Saving ...\n                    </div>\n                {:else}\n                    <a href=\"/\" on:click|preventDefault={() => {editSampling = false}} class=\"btn btn-light btn-sm mr-4\">\n                        Cancel\n                    </a>\n                    <a href=\"/\" on:click|preventDefault={save(`sampling`)}\n                     class=\"btn btn-light btn-sm {state === `saving` ? `disabled` : null}\"\n                    >\n                        Save\n                    </a>\n                {/if}\n            {:else}\n                <div class=\"small py-1\">\n                    <div class=\"mt-2 mb-2\">\n                        History: {$config.sampling.history}\n                        <div class=\"font-italic font-weight-lighter\">\n                            Max samples in history\n                        </div>\n                    </div>\n                    <div class=\"mb-4\">\n                        Sampling interval: {$config.sampling.interval}\n                        <div class=\"font-italic font-weight-lighter\">\n                            Sampling interval (in ms)\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <a href=\"/\" on:click|preventDefault={() => {editSampling = true}} class=\"btn btn-light btn-sm\">\n                        Edit\n                    </a>\n                </div>\n            {/if}\n        </div>\n    </Col>\n    <Col xs=\"4\">\n        <small class=\"px-2 py-1 bg-light\">\n            Battery Level Configuration\n        </small>\n        <div class=\"pl-2\">\n            {#if editBattery}\n                <form id=\"form-battery\" class=\"mt-4\" disabled>\n                    <div class=\"form-group row\">\n                        <label class=\"col-sm-{col_left} col-form-label-sm\">\n                            Min (1%)\n                        </label>\n                        <div class=\"col-sm-{col_right}\">\n                            <input type=\"number\" name=\"min\"\n                             bind:value=\"{configEdited.battery.min}\"\n                             class=\"form-control form-control-sm\"\n                             disabled={state === `saving` ? `disabled` : null}\n                            >\n                            <small class=\"form-text text-muted\">\n                                <em>Min mV for 1% battery level</em>\n                            </small>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-sm-{col_left} col-form-label-sm\">\n                            Max (100%)\n                        </label>\n                        <div class=\"col-sm-{col_right}\">\n                            <input type=\"number\" name=\"max\"\n                             bind:value=\"{configEdited.battery.max}\"\n                             class=\"form-control form-control-sm\"\n                             disabled={state === `saving` ? `disabled` : null}\n                            >\n                            <small class=\"form-text text-muted\">\n                                <em>Max mV for 100% battery level</em>\n                            </small>\n                        </div>\n                    </div>\n                </form>\n                {#if state === `saving` && saving === `battery`}\n                    <div class=\"small\">\n                        Saving ...\n                    </div>\n                {:else}\n                    <a href=\"/\" on:click|preventDefault={() => {editBattery = false}} class=\"btn btn-light btn-sm mr-4\">\n                        Cancel\n                    </a>\n                    <a href=\"/\" on:click|preventDefault={save(`battery`)}\n                     class=\"btn btn-light btn-sm {state === `saving` ? `disabled` : null}\"\n                    >\n                        Save\n                    </a>\n                {/if}\n            {:else}\n                <div class=\"small py-1\">\n                    <div class=\"mt-2 mb-2\">\n                        Min (1%): {$config.battery.min}\n                        <div class=\"font-italic font-weight-lighter\">\n                            Min mV for 1% battery level\n                        </div>\n                    </div>\n                    <div class=\"mb-4\">\n                        Max (100%): {$config.battery.max}\n                        <div class=\"font-italic font-weight-lighter\">\n                            Max mV for 100% battery level\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <a href=\"/\" on:click|preventDefault={() => {editBattery = true}} class=\"btn btn-light btn-sm\">\n                        Edit\n                    </a>\n                </div>\n            {/if}\n        </div>\n    </Col>\n    <Col xs=\"4\">\n        <small class=\"px-2 py-1 bg-light\">\n            Server Logs\n        </small>\n        <div class=\"pl-2\">\n            {#if editLog}\n                <form id=\"form-log\" class=\"mt-4 select-log\" disabled>\n                    {#each logsHelp as log (log.log)}\n                        <div class=\"form-group row\">\n                            <Col class=\"font-weight-lighter small\">\n                                <CustomInput\n                                    bind:checked={configEdited.log[log.log]}\n                                    type=\"switch\"\n                                    bsSize=\"sm\"\n                                    inline=true\n                                    id=\"show_{log.log}\"\n                                    name=\"{log.log}\"\n                                    label=\"{log.help}\" />\n                            </Col>\n                        </div>\n                    {/each}\n                </form>\n                {#if state === `saving` && saving === `log`}\n                    <div class=\"small\">\n                        Saving ...\n                    </div>\n                {:else}\n                    <a href=\"/\" on:click|preventDefault={() => {editLog = false}} class=\"btn btn-light btn-sm mr-4\">\n                        Cancel\n                    </a>\n                    <a href=\"/\" on:click|preventDefault={save(`log`)}\n                     class=\"btn btn-light btn-sm {state === `saving` ? `disabled` : null}\"\n                    >\n                        Save\n                    </a>\n                {/if}\n            {:else}\n                <div class=\"small py-1\">\n                    {#each logsHelp as log (log.log)}\n                        {#if $config.log[log.log]}\n                            <div class=\"mt-2 mb-2\">\n                                <span class=\"font-italic font-weight-lighter\">\n                                    {log.help}\n                                </span>\n                            </div>\n                        {/if}\n                    {/each}\n                </div>\n                <div>\n                    <a href=\"/\" on:click|preventDefault={() => {editLog = true}} class=\"btn btn-light btn-sm\">\n                        Edit\n                    </a>\n                </div>\n            {/if}\n        </div>\n    </Col>\n</Row>\n<Row class=\"border-top pt-3 mt-3\">\n    <Col xs=\"8\">\n        <a href=\"/\" on:click|preventDefault={() => {stateConfig = `export`}}\n         class=\"btn btn-sm mr-2 btn-light btn-sm\">\n            Export Configuration\n        </a>\n        <a href=\"/\" on:click|preventDefault={() => {stateConfig = `import`}}\n         class=\"btn btn-sm mr-2 btn-light btn-sm\">\n            Import Configuration\n        </a>\n        {#if state === `saving` && saving === `config`}\n            <div class=\"float-right ml-2 small\">\n                Saving ...\n            </div>\n        {:else}\n            {#if stateConfig === `import`}\n                <a href=\"/\" on:click|preventDefault={save(`config`)}\n                 class=\"float-right ml-2 btn btn-sm btn-light btn-sm {state === `saving` ? `disabled` : null}\">\n                    Save Configuration\n                </a>\n            {/if}\n            {#if stateConfig !== `hidden`}\n                <a href=\"/\" on:click|preventDefault={() => {stateConfig = `hidden`}}\n                 class=\"float-right ml-2 btn btn-sm btn-light btn-sm\">\n                    Cancel\n                </a>\n            {/if}\n        {/if}\n        {#if stateConfig !== `hidden`}\n            <div class=\"mt-3\">\n                <textarea class=\"form-control form-control-sm small\" bind:value={configJSON} readonly={stateConfig === `export`} rows=\"16\"></textarea>\n            </div>\n        {/if}\n    </Col>\n</Row>\n",
    "<script>\n    import { cols, syncColumns } from './../store/api.js';\n    import { FormGroup, CustomInput, Label, Row, Col } from 'sveltestrap';\n    import CustomMeasures from './CustomMeasures.svelte';\n    let showSelectColumns = false;\n    $: syncColumns($cols);\n</script>\n\n<style>\n    .select-columns :global(.custom-control-label) {\n        padding-top: 2px;\n    }\n</style>\n\n<Row class=\"mt-2 mb-2 small\">\n    <Col>\n        <div class=\"float-left select-columns\">\n            <CustomInput\n                bind:checked={showSelectColumns}\n                type=\"switch\"\n                bsSize=\"sm\"\n                inline=true\n                class=\"bg-light mt-1 pr-2 pl-5 pt-1 pb-2 border rounded\"\n                id=\"selectColumns\"\n                name=\"selectColumns\"\n                label=\"Select Columns\" />\n        </div>\n        <div class=\"float-left\">\n            <CustomMeasures />\n        </div>\n    </Col>\n</Row>\n<div class=\"select-columns\">\n    {#if showSelectColumns}\n        <Row>\n            {#each $cols as col (col.field)}\n                <Col sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\" class=\"font-weight-lighter small\">\n                    <CustomInput\n                        bind:checked={col.show}\n                        type=\"switch\"\n                        bsSize=\"sm\"\n                        inline=true\n                        id=\"show_{col.field}\"\n                        name=\"{col.field}\"\n                        label=\"{col.label || col.field}\" />\n                </Col>\n            {/each}\n        </Row>\n    {/if}\n</div>\n",
    "<script>\n    import { api, tags, cols } from './../store/api.js';\n    import { targets } from './../store/targets.js';\n    import { dictTargets } from './../store/dict.js';\n    import { createEventDispatcher } from 'svelte';\n    import { Form, FormGroup, FormText, Input, CustomInput, Label, Button, Table, Row, Col } from 'sveltestrap';\n    import TargetTag from  './TargetTag.svelte';\n    export let edited;\n    const cancel = () => {\n        edited = -1;\n    };\n    const target = typeof edited === `string` ? {\n        type: edited,\n        enable: 0,\n        name: ``,\n        interval: 60,\n    } : $targets[edited];\n    const config = $dictTargets.find(t => t.type === target.type);\n    if (!target.id && config.measurement) {\n        target.measurement = `tag`;\n    }\n    let targetEdited = JSON.parse(JSON.stringify(target));\n    targetEdited.enable = 1 * targetEdited.enable;\n    targetEdited.tags = {};\n    for (const tag of $tags) {\n        const selected = target.tags && !!target.tags[tag.id];\n        const tagEdited = selected ? target.tags[tag.id] : {\n            id: null,\n        };\n        targetEdited.tags[tag.id] = {\n            ...tagEdited,\n            selected,\n            // TODO: add filter? (only available measures)\n            // $: tagMeasures = measures.filter(measure => {\n            //     return tag.last[measure.field] !== undefined || tag[measure.field] !== undefined;\n            // });\n            measures: $cols.filter(col => col.render === `measure`).map(measure => {\n                return {\n                    measure,\n                    selected: selected && tagEdited.measures[measure.field] !== undefined,\n                    field: selected && tagEdited.measures[measure.field] ? tagEdited.measures[measure.field].field : measure.field,\n                    label: selected && tagEdited.measures[measure.field] ? tagEdited.measures[measure.field].label : measure.label,\n                };\n            }),\n        };\n    }\n    let state = `view`; // `view` | `saving`\n    async function save() {\n        state = `saving`;\n        const data = JSON.parse(JSON.stringify(targetEdited));\n        data.tags = {};\n        for (const id in targetEdited.tags) {\n            if (targetEdited.tags[id].selected) {\n                data.tags[id] = JSON.parse(JSON.stringify(targetEdited.tags[id]));\n                data.tags[id].measures = {};\n                for (const measure of targetEdited.tags[id].measures) {\n                    if (measure.selected) {\n                        data.tags[id].measures[measure.measure.field] = {\n                            label: measure.label,\n                            field: measure.field,\n                        };\n                    }\n                }\n            }\n        }\n        try {\n            targets.set(await api.post(`target`, data));\n        } catch(error) {\n            console.log(error);\n        }\n        state = `view`;\n        edited = -1;\n    }\n</script>\n\n<style>\n    .targets :global(.custom-control-label) {\n        padding-top: 2px;\n    }\n</style>\n\n<div class=\"targets\">\n    <div class=\"mt-1 pt-2\">\n        <a href=\"/\" on:click|preventDefault={cancel}\n         class=\"btn btn-light btn-sm\">\n            Cancel\n        </a>\n        <a href=\"/\" on:click|preventDefault={e => save()}\n         class=\"btn btn-light btn-sm\">\n            Save\n        </a>\n        <a href=\"/\" on:click|preventDefault={e => console.log(targetEdited)}\n         class=\"btn btn-link btn-sm text-muted float-right\">\n            log\n        </a>\n    </div>\n\n    <Row>\n        <Col xs=\"4\" class=\"mt-3\">\n            <Form class=\"small\">\n                <FormGroup class=\"row\">\n                    <Label class=\"col-sm-4\" for=\"enable\">{config.label}</Label>\n                    <div class=\"col-sm-8\">\n                        <CustomInput\n                            bind:checked={targetEdited.enable}\n                            type=\"switch\"\n                            id=\"enable\"\n                            name=\"enable\"\n                            label=\"Enable\" />\n                    </div>\n                </FormGroup>\n                <FormGroup class=\"row\">\n                    <Label class=\"col-sm-4\" for=\"name\">Name</Label>\n                    <div class=\"col-sm-8\">\n                        <Input\n                            bind:value={targetEdited.name}\n                            type=\"text\"\n                            size=\"sm\"\n                            id=\"name\"\n                            name=\"name\"\n                            placeholder=\"Name\" />\n                    </div>\n                </FormGroup>\n                <FormGroup class=\"row\">\n                    <Label class=\"col-sm-4\" for=\"interval\">Interval</Label>\n                    <div class=\"col-sm-8\">\n                        <Input\n                            bind:value={targetEdited.interval}\n                            type=\"number\"\n                            size=\"sm\"\n                            id=\"interval\"\n                            name=\"interval\"\n                            placeholder=\"60\" />\n                    </div>\n                </FormGroup>\n                <hr>\n                {#each config.config as field}\n                    <FormGroup class=\"row\">\n                        <Label class=\"col-sm-4\" for=\"{field.name}\">{field.name}</Label>\n                        <div class=\"col-sm-8\">\n                            <Input\n                                bind:value={targetEdited[field.name]}\n                                type={field.type || `text`}\n                                size=\"sm\"\n                                id=\"{field.name}\"\n                                name=\"{field.name}\" />\n                        </div>\n                    </FormGroup>\n                {/each}\n                <hr>\n                {#if config.measurement}\n                    <FormGroup class=\"row\">\n                        <Label class=\"col-sm-4\" for=\"measurement\">Measurement</Label>\n                        <div class=\"col-sm-8\">\n                            <CustomInput\n                                bind:value={targetEdited.measurement}\n                                type=\"select\"\n                                class=\"custom-select-sm\"\n                                id=\"measurement\"\n                                name=\"measurement\"\n                            >\n                                <option value=\"tag\">Tag</option>\n                                <option value=\"measure\">Measure</option>\n                                <option value=\"both\">Both</option>\n                            </CustomInput>\n                        </div>\n                    </FormGroup>\n                {/if}\n            </Form>\n        </Col>\n        <Col xs=\"8\" class=\"mt-3\">\n            <p>Tags</p>\n            {#each $tags as tag (tag.id)}\n                <TargetTag {tag} bind:targetTag={targetEdited.tags[tag.id]} />\n            {/each}\n        </Col>\n    </Row>\n</div>\n",
    "<script>\n  export let tip = \"\";\n  export let top = false;\n  export let right = false;\n  export let bottom = false;\n  export let left = false;\n  export let active = false;\n  export let color = \"white\";\n  export let bgcolor = \"black\";\n\n  let style = `color: ${color}; background-color: ${bgcolor};`;\n  function hide() {\n      active = false;\n  }\n</script>\n\n<style>\n  .tooltip-wrapper {\n    position: relative;\n    display: inline-block;\n  }\n  .tooltip {\n    position: absolute;\n    font-family: inherit;\n    display: inline-block;\n    white-space: nowrap;\n    color: inherit;\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 150ms, visibility 150ms;\n  }\n\n  .default-tip {\n    display: inline-block;\n    padding: 8px 16px;\n    border-radius: 6px;\n    color: inherit;\n  }\n\n  .tooltip.top {\n    left: 50%;\n    transform: translate(-50%, -100%);\n    margin-top: -8px;\n  }\n\n  .tooltip.bottom {\n    left: 50%;\n    bottom: 0;\n    transform: translate(-50%, 100%);\n    margin-bottom: -8px;\n  }\n\n  .tooltip.left {\n    left: 0;\n    transform: translateX(-100%);\n    margin-left: -8px;\n  }\n\n  .tooltip.right {\n    right: 0;\n    transform: translateX(100%);\n    margin-right: -8px;\n  }\n\n  .tooltip.active {\n    opacity: 1;\n    visibility: initial;\n  }\n\n  .tooltip-slot:hover + .tooltip {\n    opacity: 1;\n    visibility: initial;\n  }\n</style>\n\n<div class=\"tooltip-wrapper\">\n  <span class=\"tooltip-slot\">\n    <slot />\n  </span>\n  <div\n    on:click={hide}\n    class=\"tooltip\"\n    class:active\n    class:left\n    class:right\n    class:bottom\n    class:top>\n    {#if tip}\n      <small class=\"default-tip\" {style}>{@html tip}</small>\n    {:else}\n      <slot name=\"custom-tip\" />\n    {/if}\n\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAmGI,0BAAW,CAAC,AAAQ,qBAAqB,AAAE,CAAC,AACxC,WAAW,CAAE,GAAG,AACpB,CAAC;AC5FD,8BAAe,CAAC,AAAQ,qBAAqB,AAAE,CAAC,AAC5C,WAAW,CAAE,GAAG,AACpB,CAAC;ACiED,uBAAQ,CAAC,AAAQ,qBAAqB,AAAE,CAAC,AACrC,WAAW,CAAE,GAAG,AACpB,CAAC;AC7DH,gBAAgB,8BAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,AACvB,CAAC,AACD,QAAQ,8BAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,OAAO,CACpB,OAAO,CAAE,YAAY,CACrB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,OAAO,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,KAAK,AAC7C,CAAC,AAED,YAAY,8BAAC,CAAC,AACZ,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,OAAO,AAChB,CAAC,AAED,QAAQ,IAAI,8BAAC,CAAC,AACZ,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,KAAK,CAAC,CACjC,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,QAAQ,OAAO,8BAAC,CAAC,AACf,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,QAAQ,KAAK,8BAAC,CAAC,AACb,IAAI,CAAE,CAAC,CACP,SAAS,CAAE,WAAW,KAAK,CAAC,CAC5B,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,QAAQ,MAAM,8BAAC,CAAC,AACd,KAAK,CAAE,CAAC,CACR,SAAS,CAAE,WAAW,IAAI,CAAC,CAC3B,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,QAAQ,OAAO,8BAAC,CAAC,AACf,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,AACrB,CAAC,AAED,4BAAa,MAAM,CAAG,QAAQ,eAAC,CAAC,AAC9B,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,AACrB,CAAC"
}